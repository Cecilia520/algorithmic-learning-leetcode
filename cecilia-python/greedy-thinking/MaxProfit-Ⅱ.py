#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""
@File    :   MaxProfit-Ⅱ.py    
@Contact :   70904372cecilia@gmail.com
@License :   (C)Copyright 2019-2020

@Modify Time      @Author    @Version    @Desciption
------------      -------    --------    -----------
2020/2/5 12:48   cecilia      1.0        买卖股票的最佳时机Ⅱ（简单）
问题描述：
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例1：
输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3

示例2：
输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。

示例3：
输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
"""


def maxPrice(prices) -> int:
    """
    买卖股票的最佳时机Ⅱ
    解决方案：贪心算法（只要今天的股票价格比昨天高，就卖出去）
    分析：为何可以这样想？——按照示例1来讲，第二天买入，第四天卖出去，收益(6-1)，一般情况我们还会这样想：
    怎么不去判断第三天卖出了呢？根据题目的意思，当天卖出以后，当天还可以买入，所以其实可以第三天卖出，第三天买入，第四天又卖出（（5-1）+ （6-5） === 6 - 1）。
    所以算法可以直接简化为只要今天比昨天大，就卖出。
    :param prices: 股票价格数组
    :return:
    算法分析：时间复杂度O(n), 空间复杂度O(1),仅仅使用变量
    """
    profits = 0
    for i in range(1, len(prices)):
        if prices[i] > prices[i - 1]:
            profits += prices[i] - prices[i - 1]
    return profits


if __name__ == '__main__':
    prices = [7, 1, 5, 3, 6, 4]
    print(maxPrice(prices))
